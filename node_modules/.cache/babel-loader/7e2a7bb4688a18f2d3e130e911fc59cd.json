{"ast":null,"code":"var _jsxFileName = \"/Users/graham_bates/Documents/Dev/procdemo2/src/components/FullScreenParalax/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { gsap } from 'gsap';\nimport { ScrollTrigger } from 'gsap/ScrollTrigger';\nimport './index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\ngsap.registerPlugin(ScrollTrigger);\n\nfunction FullScreenParallax(props) {\n  _s();\n\n  const ref = useRef(null);\n  useEffect(() => {\n    const rootElement = ref.current;\n    const borderElement = rootElement.querySelector('.full-screen-parallax-border');\n    const timeline = gsap.timeline({\n      scrollTrigger: {\n        trigger: rootElement,\n        start: \"top top\",\n        end: \"bottom top\",\n        scrub: true,\n        onEnter: self => {\n          gsap.to(borderElement, {\n            borderWidth: 0\n          });\n\n          if (props.onEnter) {\n            props.onEnter(self);\n          }\n        },\n        onEnterBack: self => {\n          if (props.onEnter) {\n            props.onEnter(self);\n          }\n        },\n        onLeave: self => {\n          if (props.onLeave) {\n            props.onLeave(self);\n          }\n        },\n        onLeaveBack: self => {\n          if (props.onLeave) {\n            props.onLeave(self);\n          }\n        },\n        onToggle: self => {\n          if (self.progress === 0 && self.direction === -1) {\n            gsap.to(borderElement, {\n              borderWidth: 150\n            });\n          }\n        }\n      }\n    });\n    gsap.utils.toArray(rootElement.querySelectorAll('.full-screen-parallax-text-wrapper')).forEach((el, i) => {\n      const textEl = el.querySelector('.full-screen-parallax-text');\n      const tl = gsap.timeline();\n      tl.fromTo(textEl, {\n        y: 0,\n        opacity: 0\n      }, {\n        y: -120,\n        opacity: 1\n      });\n      tl.to(textEl, {\n        opacity: 0,\n        y: -240\n      });\n      tl.eventCallback('onStart', () => {\n        if (props.onEnterItem) {\n          props.onEnterItem(props.data[i]);\n        }\n      });\n      timeline.add(tl);\n    });\n    return () => {\n      timeline.kill();\n    };\n  }, [props.data]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"full-screen-parallax-root\",\n    ref: ref,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"full-screen-parallax\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"full-screen-parallax-media-wrapper\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"full-screen-parallax-media\",\n          children: props.mediaComponent\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 21\n        }, this), props.data.map((d, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"full-screen-parallax-text-wrapper\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"full-screen-parallax-text\",\n            children: props.renderItem(d)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 29\n          }, this)\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 25\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"full-screen-parallax-border\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 9\n  }, this);\n}\n\n_s(FullScreenParallax, \"8uVE59eA/r6b92xF80p7sH8rXLk=\");\n\n_c = FullScreenParallax;\nFullScreenParallax.props = {\n  mediaComponent: PropTypes.node.isRequired,\n  data: PropTypes.array.isRequired,\n  renderItem: PropTypes.func.isRequired,\n  onEnter: PropTypes.func,\n  onLeave: PropTypes.func,\n  onEnterItem: PropTypes.func,\n  onLeaveItem: PropTypes.func\n};\nexport default FullScreenParallax;\n\nvar _c;\n\n$RefreshReg$(_c, \"FullScreenParallax\");","map":{"version":3,"sources":["/Users/graham_bates/Documents/Dev/procdemo2/src/components/FullScreenParalax/index.js"],"names":["React","useEffect","useRef","PropTypes","gsap","ScrollTrigger","registerPlugin","FullScreenParallax","props","ref","rootElement","current","borderElement","querySelector","timeline","scrollTrigger","trigger","start","end","scrub","onEnter","self","to","borderWidth","onEnterBack","onLeave","onLeaveBack","onToggle","progress","direction","utils","toArray","querySelectorAll","forEach","el","i","textEl","tl","fromTo","y","opacity","eventCallback","onEnterItem","data","add","kill","mediaComponent","map","d","renderItem","node","isRequired","array","func","onLeaveItem"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { gsap } from 'gsap';\nimport { ScrollTrigger } from 'gsap/ScrollTrigger';\nimport './index.css';\n\ngsap.registerPlugin(ScrollTrigger);\n\nfunction FullScreenParallax(props) {\n    const ref = useRef(null);\n\n    useEffect(() => {\n        const rootElement = ref.current;\n        const borderElement = rootElement.querySelector('.full-screen-parallax-border');\n\n        const timeline = gsap.timeline({\n            scrollTrigger: {\n                trigger: rootElement,\n                start: \"top top\",\n                end: \"bottom top\",\n                scrub: true,\n                onEnter: (self) => {\n                    gsap.to(\n                        borderElement,\n                        { borderWidth: 0 },\n                    );\n                    \n                    if (props.onEnter) {\n                        props.onEnter(self);\n                    }\n                },\n                onEnterBack: (self) => {\n                    if (props.onEnter) {\n                        props.onEnter(self);\n                    }\n                },\n                onLeave: (self) => {\n                    if (props.onLeave) {\n                        props.onLeave(self);\n                    }\n                },\n                onLeaveBack: (self) => {\n                    if (props.onLeave) {\n                        props.onLeave(self);\n                    }\n                },\n                onToggle: (self) => {\n                    if (self.progress === 0 && self.direction === -1) {\n                        gsap.to(\n                            borderElement,\n                            { borderWidth: 150 },\n                        );\n                    }\n                },\n            }\n        });\n\n        gsap.utils.toArray(rootElement.querySelectorAll('.full-screen-parallax-text-wrapper')).forEach((el, i) => {\n            const textEl = el.querySelector('.full-screen-parallax-text');\n            const tl = gsap.timeline();\n            \n            tl.fromTo(\n                textEl,\n                { y: 0, opacity: 0 },\n                { y: -120, opacity: 1 },\n            );\n            tl.to(textEl, { opacity: 0, y: -240 });\n            \n            tl.eventCallback('onStart', () => {\n                if (props.onEnterItem) {\n                    props.onEnterItem(props.data[i]);\n                }\n            });\n\n            timeline.add(tl);\n        });\n\n        return () => {\n            timeline.kill();\n        }\n    }, [props.data]);\n\n    return (\n        <div className=\"full-screen-parallax-root\" ref={ref}>\n            <div className=\"full-screen-parallax\">\n                <div className=\"full-screen-parallax-media-wrapper\">\n                    <div className=\"full-screen-parallax-media\">\n                        {props.mediaComponent}\n                    </div>\n                    {props.data.map((d, i) => (\n                        <div className=\"full-screen-parallax-text-wrapper\" key={i}>\n                            <div className=\"full-screen-parallax-text\">\n                                {props.renderItem(d)}\n                            </div>\n                        </div>\n                    ))}\n                </div>\n                <div className=\"full-screen-parallax-border\" />\n            </div>\n        </div>\n    );\n}\n\nFullScreenParallax.props = {\n    mediaComponent: PropTypes.node.isRequired,\n    data: PropTypes.array.isRequired,\n    renderItem: PropTypes.func.isRequired,\n    onEnter: PropTypes.func,\n    onLeave: PropTypes.func,\n    onEnterItem: PropTypes.func,\n    onLeaveItem: PropTypes.func,\n};\n\nexport default FullScreenParallax;\n"]},"metadata":{},"sourceType":"module"}