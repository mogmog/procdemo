{"ast":null,"code":"import Procedural from 'procedural-gl';\nimport React from 'react';\nconst SUPPORTED_SETTERS = ['displayLocation', 'setCameraMode', 'setCameraModeControlVisible', 'setCompassVisible', 'setEnvironment', 'setLayersControlVisible', 'setRotationControlVisible', 'setUserLocation', 'setUserLocationControlVisible', 'setZoomControlVisible'];\nconst SUPPORTED_CALLBACKS = ['onBoundsFocused', 'onCameraChange', 'onFeatureClicked', 'onFeatureSelected', 'onFeaturesLoaded', 'onLocationError', 'onLocationFocused', 'onLocationLoaded', 'onOverlayAdded', 'onUserInteraction'];\nconst SUPPORTED_METHODS = ['addOverlay', 'focusOnBounds', 'focusOnFeature', 'focusOnLocation', 'highlightFeature', 'orbitTarget', 'pause', 'play', 'removeOverlay', 'toggleUserLocationTracking', 'updateOverlay'];\n\nclass ProceduralMap extends React.Component {\n  constructor(props) {\n    super(props);\n\n    if (typeof Procedural === 'undefined') {\n      window.Procedural = {};\n    }\n\n    this.generateMethods();\n  }\n\n  proxyProps(nextProps, force) {\n    // Support invoking of methods using props\n    for (let setter of SUPPORTED_SETTERS) {\n      let prop = setter;\n\n      if (setter.slice(0, 3) === 'set') {\n        prop = setter.slice(3);\n        prop = prop.charAt(0).toLowerCase() + prop.slice(1);\n      }\n\n      if (nextProps[prop] !== this.props[prop] || force && nextProps[prop] !== undefined) {\n        const value = nextProps[prop];\n        Procedural[setter](value);\n      }\n    } // Support proxying handlers via props\n\n\n    for (let callback of SUPPORTED_CALLBACKS) {\n      if (nextProps[callback] !== Procedural[callback] && typeof nextProps[callback] === 'function') {\n        Procedural[callback] = nextProps[callback];\n      }\n    }\n  }\n\n  generateMethods() {\n    for (let method of SUPPORTED_METHODS) {\n      this[method] = (...args) => {\n        Procedural[method](...args);\n      };\n    }\n  }\n\n  componentDidMount() {\n    const {\n      datasource,\n      ...props\n    } = this.props;\n    this.proxyProps(props, true);\n    Procedural.init({\n      container: this.el,\n      datasource\n    });\n  }\n\n  shouldComponentUpdate(nextProps) {\n    // Pass through props to Procedural lib\n    this.proxyProps(nextProps); // Never trigger a React update\n\n    return false;\n  }\n\n  render() {\n    return React.createElement('div', {\n      ref: el => this.el = el,\n      style: {\n        height: '100%',\n        width: '100%'\n      }\n    });\n  }\n\n}\n\nexport default ProceduralMap;","map":{"version":3,"sources":["/Users/graham_bates/Documents/Dev/procdemo2/node_modules/procedural-gl-react/build/procedural-gl-react.module.js"],"names":["Procedural","React","SUPPORTED_SETTERS","SUPPORTED_CALLBACKS","SUPPORTED_METHODS","ProceduralMap","Component","constructor","props","window","generateMethods","proxyProps","nextProps","force","setter","prop","slice","charAt","toLowerCase","undefined","value","callback","method","args","componentDidMount","datasource","init","container","el","shouldComponentUpdate","render","createElement","ref","style","height","width"],"mappings":"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","sourcesContent":["import Procedural from 'procedural-gl';\nimport React from 'react';\n\nconst SUPPORTED_SETTERS = [\n  'displayLocation',\n  'setCameraMode',\n  'setCameraModeControlVisible',\n  'setCompassVisible',\n  'setEnvironment',\n  'setLayersControlVisible',\n  'setRotationControlVisible',\n  'setUserLocation',\n  'setUserLocationControlVisible',\n  'setZoomControlVisible'\n];\n\nconst SUPPORTED_CALLBACKS = [\n  'onBoundsFocused',\n  'onCameraChange',\n  'onFeatureClicked',\n  'onFeatureSelected',\n  'onFeaturesLoaded',\n  'onLocationError',\n  'onLocationFocused',\n  'onLocationLoaded',\n  'onOverlayAdded',\n  'onUserInteraction'\n];\n\nconst SUPPORTED_METHODS = [\n  'addOverlay',\n  'focusOnBounds',\n  'focusOnFeature',\n  'focusOnLocation',\n  'highlightFeature',\n  'orbitTarget',\n  'pause',\n  'play',\n  'removeOverlay',\n  'toggleUserLocationTracking',\n  'updateOverlay'\n];\n\nclass ProceduralMap extends React.Component {\n  constructor(props) {\n    super(props);\n    if ( typeof Procedural === 'undefined' ) {\n      window.Procedural = {};\n    }\n    this.generateMethods();\n  }\n\n  proxyProps( nextProps, force ) {\n    // Support invoking of methods using props\n    for ( let setter of SUPPORTED_SETTERS ) {\n      let prop = setter;\n      if ( setter.slice(0, 3) === 'set' ) {\n        prop = setter.slice(3);\n        prop = prop.charAt( 0 ).toLowerCase() + prop.slice(1);\n      }\n\n      if ( nextProps[prop] !== this.props[prop] ||\n           ( force && nextProps[prop] !== undefined ) ) {\n        const value = nextProps[prop];\n        Procedural[setter](value);\n      }\n    }\n\n    // Support proxying handlers via props\n    for ( let callback of SUPPORTED_CALLBACKS ) {\n      if ( nextProps[callback] !== Procedural[callback] &&\n           typeof(nextProps[callback]) === 'function' ) {\n        Procedural[callback] = nextProps[callback];\n      }\n    }\n  }\n\n  generateMethods() {\n    for ( let method of SUPPORTED_METHODS ) {\n      this[method] = (...args) => {\n        Procedural[method](...args);\n      };\n    }\n  }\n\n  componentDidMount() {\n    const {datasource, ...props} = this.props;\n    this.proxyProps( props, true );\n    Procedural.init( {\n      container: this.el, datasource\n    } );\n  }\n\n  shouldComponentUpdate( nextProps ) {\n    // Pass through props to Procedural lib\n    this.proxyProps( nextProps );\n\n    // Never trigger a React update\n    return false;\n  }\n\n  render() {\n    return React.createElement( 'div', {\n      ref: el => this.el = el,\n      style: { height: '100%', width: '100%' }\n    } );\n  }\n}\n\nexport default ProceduralMap;\n"]},"metadata":{},"sourceType":"module"}